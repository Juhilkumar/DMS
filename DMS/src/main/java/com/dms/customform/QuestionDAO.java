package com.dms.customform;

import com.dms.customform.abstractfactory.CustomFormAbstractFactory;
import com.dms.customform.interfaces.IFormModel;
import com.dms.customform.interfaces.IQuestionDAO;
import com.dms.customform.interfaces.IQuestionModel;
import connection.interfaces.ISqlConnection;
import connection.SqlConnectionImpl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class QuestionDAO implements IQuestionDAO {
    private static final String QUESTION_ID_COLUMN = "questionId";
    private static final String QUESTION_TYPE_COLUMN = "questionType";
    private static final String QUESTION_DESCRIPTION_COLUMN = "questionDescription";
    private static final String QUESTION_OPTION_1_COLUMN = "optionValue1";
    private static final String QUESTION_OPTION_2_COLUMN = "optionValue2";
    private static final String QUESTION_OPTION_3_COLUMN = "optionValue3";
    private static final String QUESTION_OPTION_4_COLUMN = "optionValue4";

    CustomFormAbstractFactory customFormAbstractFactory = CustomFormAbstractFactory.instance();
    private final ISqlConnection connectionManager;

    public QuestionDAO() {
        connectionManager = new SqlConnectionImpl();
    }

    public List<IQuestionModel> getQuestionList(String formName) throws SQLException {
        List<IQuestionModel> questionList = new ArrayList<>();
        try {
            String selectQuery = "SELECT questionId, questionDescription, questionType, optionValue1, optionValue2, optionValue3, optionValue4 FROM FormDetail JOIN Form on FormDetail.formId = Form.formId WHERE formName='" + formName + "'";
            connectionManager.executeRead(selectQuery);
            ResultSet result = connectionManager.executeResult(selectQuery);
            while (result.next()) {
                IQuestionModel iQuestionModel = customFormAbstractFactory.createQuestionModel();
                iQuestionModel.setQuestionId(result.getString(QUESTION_ID_COLUMN));
                iQuestionModel.setQuestionDescription(result.getString(QUESTION_DESCRIPTION_COLUMN));
                iQuestionModel.setQuestionType(result.getString(QUESTION_TYPE_COLUMN));
                iQuestionModel.setOptionValue1(result.getString(QUESTION_OPTION_1_COLUMN));
                iQuestionModel.setOptionValue2(result.getString(QUESTION_OPTION_2_COLUMN));
                iQuestionModel.setOptionValue3(result.getString(QUESTION_OPTION_3_COLUMN));
                iQuestionModel.setOptionValue4(result.getString(QUESTION_OPTION_4_COLUMN));
                questionList.add(iQuestionModel);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
        return questionList;
    }

    public void insertFormData(IFormModel formModel) throws SQLException {
        try {
            String insertQuery = "INSERT INTO Form(formName, totalQuestions) VALUES ('" + formModel.getFormName() + "','" + formModel.getQuestions().size() + "')";
            connectionManager.executeWriteForAutoGeneratedKey(insertQuery);
            ResultSet resultSet = connectionManager.executeResultForAutoGeneratedKey(insertQuery);
            if (resultSet.next()) {
                int formId = resultSet.getInt(1);
                for (IQuestionModel questionModel : formModel.getQuestions()) {
                    String insertFormDetailQuery = "INSERT INTO FormDetail(formId, questionDescription, questionType, optionValue1, optionValue2, optionValue3, optionValue4) " +
                            "VALUES ('" + formId + "','" + questionModel.getQuestionDescription() + "','" + questionModel.getQuestionType() + "','" + questionModel.getOptionValue1() + "', '" + questionModel.getOptionValue2() + "', '" + questionModel.getOptionValue3() + "', '" + questionModel.getOptionValue4() + "')";
                    connectionManager.executeWriteForAutoGeneratedKey(insertFormDetailQuery);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
    }
}
