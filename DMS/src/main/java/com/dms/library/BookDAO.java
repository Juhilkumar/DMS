package com.dms.library;

import com.dms.library.abstractfactory.LibraryAbstractFactory;
import com.dms.library.interfaces.IBookModel;
import com.dms.library.interfaces.IBookDAO;
import connection.SqlConnectionImpl;
import connection.interfaces.ISqlConnection;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class BookDAO implements IBookDAO {
    private static final String BOOK_ID_COLUMN = "bookId";
    private static final String BOOK_NAME_COLUMN = "bookName";
    private static final String BOOK_AUTHOR_COLUMN = "bookAuthor";

    LibraryAbstractFactory libraryAbstractFactory = LibraryAbstractFactory.instance();

    private final ISqlConnection connectionManager;

    public BookDAO() {
        connectionManager = new SqlConnectionImpl();
    }

    public List<IBookModel> getBookList() throws SQLException {
        List<IBookModel> bookList = new ArrayList<>();
        try {
            String selectQuery = "SELECT * FROM Book";
            connectionManager.executeRead(selectQuery);
            ResultSet result = connectionManager.executeResult(selectQuery);
            while (result.next()) {
                IBookModel iBookModel = libraryAbstractFactory.createBookModel();
                iBookModel.setBookId(result.getInt(BOOK_ID_COLUMN));
                iBookModel.setBookName(result.getString(BOOK_NAME_COLUMN));
                iBookModel.setBookAuthor(result.getString(BOOK_AUTHOR_COLUMN));
                bookList.add(iBookModel);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
        return bookList;
    }

    public Boolean addBook(String bookName, String bookAuthor, int bookQuantity) throws SQLException {
        try {
            String insertQuery = "INSERT INTO Book(bookName, bookAuthor, bookQuantity, availableBookCount) VALUES('" + bookName + "','" + bookAuthor + "','" + bookQuantity + "','" + bookQuantity + "')";
            connectionManager.executeWriteForAutoGeneratedKey(insertQuery);
            ResultSet result = connectionManager.executeResultForAutoGeneratedKey(insertQuery);
            if (result.next()) {
                result.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
        return true;
    }

    public String removeBook(String bookName) throws SQLException {
        try {
            String deleteQuery = "DELETE FROM Book WHERE bookName = '" + bookName + "'";
            connectionManager.executeWrite(deleteQuery);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
        return bookName;
    }

    public List<IBookModel> searchBook(String text) throws SQLException {
        List<IBookModel> bookList = new ArrayList<>();
        try {
            String searchQuery = "SELECT * FROM Book WHERE (bookName LIKE '%" + text + "%' OR bookId LIKE '%" + text + "%' OR bookAuthor LIKE '%" + text + "%')";
            connectionManager.executeRead(searchQuery);
            ResultSet result = connectionManager.executeResult(searchQuery);
            while (result.next()) {
                IBookModel iBookModel = libraryAbstractFactory.createBookModel();
                iBookModel.setBookId(result.getInt(BOOK_ID_COLUMN));
                iBookModel.setBookName(result.getString(BOOK_NAME_COLUMN));
                iBookModel.setBookAuthor(result.getString(BOOK_AUTHOR_COLUMN));
                bookList.add(iBookModel);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connectionManager.closeConnection();
        }
        return bookList;
    }

}
