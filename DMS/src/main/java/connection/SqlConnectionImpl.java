package connection;

import connection.interfaces.ISqlConnection;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Map;
import java.util.Properties;

public class SqlConnectionImpl implements ISqlConnection {
    private Connection connection;
    private Statement statement;
    private ResultSet resultSet;
    public String url,password, username;

    public SqlConnectionImpl() {
        connection = null;
        statement = null;
        resultSet = null;
    }

    public Connection openConnection() {
        try {
            Map<String,String> environment =System.getenv();
            for(Map.Entry<String,String> env : environment.entrySet()){
                if(env.getKey().equals("SPRING_DATASOURCE_PASSWORD")){
                    password = env.getValue();
                }
                if(env.getKey().equals("SPRING_DATASOURCE_URL")){
                    url = env.getValue();
                }
                if(env.getKey().equals("SPRING_DATASOURCE_USERNAME")){
                    username = env.getValue();
                }

            }
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(url,username,password);
        }catch ( SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return connection;
    }

    public boolean executeRead(String query) throws SQLException {
        this.openConnection();
        this.statement = this.connection.createStatement();
        this.statement.executeQuery(query);
        return true;
    }

    public boolean executeWrite(String query) throws SQLException {
        this.openConnection();
        this.statement = this.connection.createStatement();
        this.statement.executeUpdate(query);
        return true;
    }

    public ResultSet executeResult(String query) throws SQLException {
        resultSet = statement.executeQuery(query);
        return resultSet;
    }

    public boolean executeWriteForAutoGeneratedKey(String query) throws SQLException {
        this.openConnection();
        this.statement = this.connection.createStatement();
        this.statement.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
        return true;
    }

    public ResultSet executeResultForAutoGeneratedKey(String query) throws SQLException {
        resultSet = statement.getGeneratedKeys();
        return resultSet;
    }

    public boolean closeConnection() throws SQLException {
        this.connection.close();
        this.statement.close();
        this.resultSet.close();
        return true;
    }

    public boolean closeConnectionWithoutResultset() throws SQLException{
        this.connection.close();
        this.statement.close();
        return true;
    }
}